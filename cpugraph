#!/usr/bin/env python3

import argparse
import psutil
import subprocess
import time


class Measurement(object):

	def __init__(self, processCount):
		self.processCount = processCount


class JobStatistics(object):

	def __init__(self):
		self.times = []
		self.measurements = []

	def _normalizeToFirstTime(self):
		assert(len(self.times) > 0)
		startTime = self.times[0]
		self.times = [time - startTime for time in self.times[:]]

	def add(self, measurement):
		self.times.append(time.time())
		self.measurements.append(measurement)


	def gplotOutput(self):
		assert(len(self.times) == len(self.measurements))
		self._normalizeToFirstTime()

		outputStr = "# time, processCount\n"

		for i in range(len(self.times)):
			time = self.times[i]
			measurement = self.measurements[i]

			outputStr += str(time)
			outputStr += ", "
			outputStr += str(measurement.processCount)
			outputStr += "\n"

		return outputStr


def currentStatistics(pid):
	parent = psutil.Process(pid)

	return Measurement(len(parent.children(recursive=True)) + 1)


def runCommandWhileProfiling(command, frequency, output):
	process = subprocess.Popen(command)
	pid = process.pid

	statistics = JobStatistics()

	while process.poll() is None:
		time.sleep(frequency)
		statistics.add(currentStatistics(pid))

	return process.wait(), statistics


def main():
	parser = argparse.ArgumentParser(
		description="Get statistics for running command.")

	parser.add_argument(
		"--frequency", dest="frequency", type=int,
		help="How often to check statistics", default=1)

	parser.add_argument(
		"--output-file", dest="output", type=str,
		help="Where to place statistics file", default="cpugraph.out")

	parser.add_argument(
		"command", type=str, help="Command to profile", nargs="*")

	args = parser.parse_args()
	frequency = args.frequency
	output = args.output
	command = args.command

	returnCode, statistics = runCommandWhileProfiling(
		command, frequency, output)

	print(statistics.gplotOutput())

	return returnCode

if __name__ == "__main__":
	main()
